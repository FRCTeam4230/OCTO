// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc4230.OCTO.commands;

import edu.wpi.first.wpilibj.Relay;
import edu.wpi.first.wpilibj.Relay.Value;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

import org.usfirst.frc4230.OCTO.Drive;
import org.usfirst.frc4230.OCTO.Robot;
import org.usfirst.frc4230.OCTO.RobotMap;

/**
 *
 */
public class AutoFlapGear extends Command {

	private double camX;

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
	public AutoFlapGear() {

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.driveTrain);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	}

	// Called just before this Command runs the first time
	protected void initialize() {
	}

	// Called repeatedly when this Command is scheduled to run
	protected void execute() {

		/*double[] targetNum = new double[10];

		targetNum = Robot.table.getNumberArray("LINE_PATTERN", targetNum);
		if (targetNum == null || targetNum.length < 2) {
			camX = 0.0;
		} else {
			SmartDashboard.putNumber("num", targetNum.length);
			camX = targetNum[1];
		}

		RobotMap.gearFlappersLight.set(Relay.Value.kForward);

		SmartDashboard.putNumber("camera 2", camX);

		final double min = 370.0;
		final double max = 380.0;
		double startAngle = RobotMap.adiGyro.getAngleX();
		if (camX == 0.0) {
			Drive.octoDrive(0.0, 0.0, 0.0, 150.0, 150.0, 0.0);
		}

		else {

			targetNum = Robot.table.getNumberArray("LINE_PATTERN", targetNum);
			if (targetNum == null || targetNum.length < 2) {
				camX = 0.0;
			} else {
				SmartDashboard.putNumber("num", targetNum.length);
				camX = targetNum[1];
			}
			while (camX < min || camX > max) {

				targetNum = Robot.table.getNumberArray("LINE_PATTERN", targetNum);
				if (targetNum == null || targetNum.length < 2) {
					camX = 0.0;
				} else {
					SmartDashboard.putNumber("num", targetNum.length);
					camX = targetNum[1];
				}

				if (camX < min) {
					Drive.octoDrive(1.0, 0.0, 0.0, 100.0, 100.0, 0.0);
				} else {
					Drive.octoDrive(-1.0, 0.0, 0.0, 100.0, 100.0, 0.0);
				}
			}
			double startCam = camX;
			while (RobotMap.gearFlappersPeg.get()) {
				double difference = RobotMap.adiGyro.getAngleX() - startAngle;
				double rotate = difference/ 90;
				
				if (targetNum == null || targetNum.length < 2) {
					camX = startCam;
				} else {
					SmartDashboard.putNumber("num", targetNum.length);
					camX = targetNum[1];
				}
				
				double camDifference = camX - startCam;
				double strafe = camDifference/ 250;

				Drive.octoDrive(strafe, 1.0, rotate, 100.0, 100.0, 0.0);
			}
			Drive.octoDrive(0.0, 0.0, 0.0, 150.0, 150.0, 0.0);*/

		}
	

	// Make this return true when this Command no longer needs to run execute()
	protected boolean isFinished() {
		return true;
	}

	// Called once after isFinished returns true
	protected void end() {
	}

	// Called when another command which requires one or more of the same
	// subsystems is scheduled to run
	protected void interrupted() {

	}
}
