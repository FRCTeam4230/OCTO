// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc4230.OCTO;

import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.Preferences;
import edu.wpi.first.wpilibj.Relay;
import edu.wpi.first.wpilibj.Servo;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.networktables.NetworkTable;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc4230.OCTO.commands.*;
import org.usfirst.frc4230.OCTO.subsystems.*;

import com.ctre.CANTalon;
import com.ctre.CANTalon.TalonControlMode;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {

	Command autonomousCommand;

	public static OI oi;
	public static NetworkTable table;

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static DriveTrain driveTrain;
    public static Shooter shooter;
    public static GearFlappers gearFlappers;
    public static Climber climber;
    public static Intake intake;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	/**
	 * This function is run when the robot is first started up and should be
	 * used for any initialization code.
	 */
	public void robotInit() {
		try {
			RobotMap.init();

			// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrain = new DriveTrain();
        shooter = new Shooter();
        gearFlappers = new GearFlappers();
        climber = new Climber();
        intake = new Intake();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
			// OI must be constructed after subsystems. If the OI creates
			// Commands
			// (which it very likely will), subsystems are not guaranteed to be
			// constructed yet. Thus, their requires() statements may grab null
			// pointers. Bad news. Don't move it.
			oi = new OI();

			// instantiate the command used for the autonomous period
			// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

        autonomousCommand = new AutonomousCommand();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
			table = NetworkTable.getTable("SmartDashboard");
			RobotMap.adiGyro.reset();

		} catch (Exception ex) {
			System.out.println("Error: " + ex.getMessage());
			throw ex;
		}
	}

	/**
	 * This function is called when the disabled button is hit. You can use it
	 * to reset subsystems before shutting down.
	 */
	public void disabledInit() {

	}

	public void disabledPeriodic() {
		Scheduler.getInstance().run();
	}

	public void autonomousInit() {
		// schedule the autonomous command (example)
		if (autonomousCommand != null)
			autonomousCommand.start();
	}

	/**
	 * This function is called periodically during autonomous
	 */
	public void autonomousPeriodic() {
		Scheduler.getInstance().run();
	}

	public void teleopInit() {
		// This makes sure that the autonomous stops running when
		// teleop starts running. If you want the autonomous to
		// continue until interrupted by another command, remove
		// this line or comment it out.

		if (autonomousCommand != null)
			autonomousCommand.cancel();
	}

	/**
	 * This function is called periodically during operator control
	 */
	public void teleopPeriodic() {
		try {
			Scheduler.getInstance().run();
			//tune(RobotMap.shooterFlyWheel, 5800.0, RobotMap.pref);
			double camX;
			double[] targetNum = new double[10];
			targetNum = Robot.table.getNumberArray("LINE_PATTERN", targetNum);
			if (targetNum == null || targetNum.length < 2) {
				camX = 0.0;
			} else {
				SmartDashboard.putNumber("num", targetNum.length);
				camX = targetNum[1];
			}
			
			//SmartDashboard.putNumber("POV", Robot.oi.driver.getPOV());
			/*double[] targetNum = new double[10];

			targetNum = Robot.table.getNumberArray("LINE_PATTERN", targetNum);
			if (targetNum == null || targetNum.length < 2) {
				camX = 0.0;
			} else {
				SmartDashboard.putNumber("num", targetNum.length);
				camX = targetNum[1];
			}*/

			//SmartDashboard.putNumber("camera 2", camX);

			/*targetNum = Robot.table.getNumberArray("LINE_PATTERN", targetNum);
			double camX;
			if (targetNum == null || targetNum.length < 2) {
				camX = 0.0;
			} else {
				SmartDashboard.putNumber("num", targetNum.length);
				camX = targetNum[1];
			}*/
			//SmartDashboard.putNumber("gyro 2", RobotMap.gyro.getAngle());

			SmartDashboard.putNumber("camera", camX);
			

		} catch (Exception ex) {
			System.out.println("Error: " + ex.getMessage());
			throw ex;
		}
		
	}

	/**
	 * This function is called periodically during test mode
	 */
	public void testPeriodic() {
		LiveWindow.run();
	}

	private void tune(CANTalon motor, double rpm, Preferences pref) {
		double targetSpeed = 0;
		double yStick = oi.driver.getRawAxis(1);
		double motorOutput = motor.getOutputVoltage() / motor.getBusVoltage();
		if (oi.driver.getRawButton(2)) {
			targetSpeed = yStick * rpm;
			motor.changeControlMode(TalonControlMode.Speed);
			motor.set(targetSpeed);
			/*RobotMap.driveTrainWheel0.set(targetSpeed * 0.793);
			RobotMap.driveTrainWheel45.set(targetSpeed * 0.845);
			RobotMap.driveTrainWheel90.set(targetSpeed * 0.828);
			RobotMap.driveTrainWheel135.set(targetSpeed * 0.914);
			RobotMap.driveTrainWheel180.set(targetSpeed * 0.845);
			RobotMap.driveTrainWheel225.set(targetSpeed * 1.0);
			RobotMap.driveTrainWheel270.set(targetSpeed * 0.914);*/
		} else {
			motor.changeControlMode(TalonControlMode.PercentVbus);
			motor.set(yStick);
			/*RobotMap.driveTrainWheel0.set(yStick * 0.793);
			RobotMap.driveTrainWheel45.set(yStick * 0.845);
			RobotMap.driveTrainWheel90.set(yStick * 0.828);
			RobotMap.driveTrainWheel135.set(yStick * 0.914);
			RobotMap.driveTrainWheel180.set(yStick * 0.845);
			RobotMap.driveTrainWheel225.set(yStick * 1.0);
			RobotMap.driveTrainWheel270.set(yStick * 0.914);*/
		}
		
		motor.setF(pref.getDouble("F", 0.0));
		motor.setP(pref.getDouble("P", 0.0));
		motor.setI(pref.getDouble("I", 0.0));
		motor.setD(pref.getDouble("D", 0.0));
		SmartDashboard.putNumber("Motor Output", motorOutput);
		SmartDashboard.putNumber("Speeds", motor.getSpeed());
		SmartDashboard.putNumber("Target Speeds", targetSpeed);
		SmartDashboard.putNumber("Looop Error", targetSpeed - motor.getSpeed());

	}
}
